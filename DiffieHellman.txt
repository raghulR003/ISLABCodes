class DiffieHellman {
    private static long power(long x, long y, long z) {
        if (y == 1)
            return x;
        else
            return (long) (Math.pow(x, y) % z);
    }

    private static long calculatePrimitiveRoot(long p) {
        for (int r = 2; r < p; r++) {
            boolean[] set = new boolean[(int) p];
            long val = 1;
            for (int i = 0; i < p - 1; i++) {
                val = (val * r) % p;
                if (set[(int) val]) {
                    break;
                }
                set[(int) val] = true;
            }
            if (val == 1) {
                return r;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        long p, primitiveRootG, privateA, privateB, publicX, publicY, secretKeyA, secretKeyB;
        java.util.Scanner sc = new java.util.Scanner(System.in);
        System.out.print("Enter a prime number p: ");
        p = sc.nextLong();
        System.out.println("Prime number p: " + p);
        primitiveRootG = calculatePrimitiveRoot(p);
        if (primitiveRootG == -1) {
            System.out.println("No primitive root found for p.");
            return;
        }
        System.out.println("Primitive root G: " + primitiveRootG);
        System.out.print("Enter private key for A: ");
        privateA = sc.nextLong();
        System.out.println("A's private key a: " + privateA);
        System.out.print("Enter private key for B: ");
        privateB = sc.nextLong();
        System.out.println("B's private key b: " + privateB);
        publicX = power(primitiveRootG, privateA, p);
        publicY = power(primitiveRootG, privateB, p);
        secretKeyA = power(publicY, privateA, p);
        secretKeyB = power(publicX, privateB, p);
        System.out.println("Public key generated by A (X): " + publicX);
        System.out.println("Public key generated by B (Y): " + publicY);
        System.out.println("Secret key for A: " + secretKeyA);
        System.out.println("Secret key for B: " + secretKeyB);
    }
}